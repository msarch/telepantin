# vim: syntax=python

#                                 SHAPES

##--- SQUIRTLE SVG SHAPE ------------------------------------------------------
import squirtle
class SVGshape(Shape):
    def setup(self,svg=None):
        self.svg = svg

    def draw(self):
        """
        svg shapes are drawn by squirtle which overides our draw method
        """
        self.svg.draw(self.pos[0], self.pos[1], scale=1, angle=0)


##--- POINT -------------------------------------------------------------------
class Point(Shape):
    """
    Simple Point, Autocad style cross
    """

    def setup(self):
        self.vtx = [-3, 0, 3, 0, 0, 0, 0, 3, 0, -3]
        self.glstring = (5, pyglet.gl.GL_LINE_STRIP, None, ('v2i/static',
            self.vtx),('c4B/static', self.color * 5))


##--- LINE FROM TWO POINTS ----------------------------------------------------
class Line(Shape):
    """
    Simple line defined by 2 points, requires: Point()
    """

    def setup(self, p1=Point(), p2=Point()):
        self.p1, self.p2 = p1, p2
        self.glstring = (2, pyglet.gl.GL_LINES, None,('v2f/static',
            (self.p1.pos[0], self.p1.pos[1], self.p2.pos[0], self.p2.pos[1])),
            ('c4B/static', self.color * 2))


##--- FILLED RECTANGLE --------------------------------------------------------
class Rect(Shape):
    """
    Rectangle, orthogonal, FILED, origin is bottom left
    N,S,E,W = north, south east, west coordinates
      _N_
    W|___|E
       S
    """

    def setup(self, N=0, S=0, E=0, W=0):  # kapla default size
        self.vtx = [E, S, W, S, W, N, E, N]
        self.glstring = (4,
                pyglet.gl.GL_TRIANGLE_FAN,
                None,
                ('v2f/static', self.vtx),
                ('c4B/static', self.color * 4))


##--- EMPTY RECTANGLE ---------------------------------------------------------
class Rect2(Shape):
    """
    Rectangle, orthogonal, OUTLINE ONLY, origin is bottom left
    """

    def setup(self, S=0, E=0, N=0, W=0):  # kapla default size
        self.vtx = [E, S, W, S, W, N, E, N, E, S]
        self.glstring = (5,
                pyglet.gl.GL_LINE_STRIP,
                None,
                ('v2f/static', self.vtx),
                ('c4B/static', self.color * 5))


##--- EMPTY CIRCLE ------------------------------------------------------------
class Circle(Shape):
    """
    Circle, outline only
    """

    def setup(self, radius=100, point=None):
        if point:
            self.radius = math.sqrt(point[0]**2+point[1]**2)
        else: self.radius = radius
        phi = 0
        stepangle = PI / (int(self.radius / 5) + 12)
        # number of divisions per ‚àè rads (half the circle)
        # with vertices numbered like a clock,  GL_TRIANGLE_STRIP order is:
        # 11, 12, 10, 1, 9, 2, 8, 3, 7, 4, 6, 5
        self.vtx = [0, self.radius]  # create list and first element
        while phi < TWOPI:
            self.vtx.append(self.radius * math.sin(phi))
            self.vtx.append(self.radius * math.cos(phi))
            phi += stepangle
        self.vtx.extend([0, self.radius])  # add right side vertex
        n = int(len(self.vtx) / 2)
        self.glstring = (n,
                pyglet.gl.GL_LINE_STRIP,
                None,
                ('v2f/static',self.vtx),
                ('c4B/static', self.color * n))


##--- CROSSHAIR VERTICAL ------------------------------------------------------
class Vline(Shape):
    """
    fullscreen vertical line
    """

    def setup(self):
        self.vtx = [0, 0]  # x only
        self.glstring = (2,
                pyglet.gl.GL_LINES,
                None,
                ('v2f/static',
                (self.vtx[0], -SCREEN_HEIGHT, self.vtx[0], SCREEN_HEIGHT)),
                ('c4B/static', self.color * 2))


##--- CROSSHAIR HORIZONTAL ----------------------------------------------------
class Hline(Shape):
    """
    fullscreen horizontal line
    """

    def setup(self):
        self.vtx = [0, 0]
        self.glstring = (2,
                pyglet.gl.GL_LINES,
                None, ('v2f/static',
                (-SCREEN_WIDTH, self.vtx[1], SCREEN_WIDTH, self.vtx[1])),
                ('c4B/static', self.color * 2))


