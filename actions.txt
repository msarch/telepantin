# vim: syntax=python

#                               ACTIONS

##--- HARMONIC OSILLATION -----------------------------------------------------
class Scotchyoke(Action):
    """
    modifies target.position coordinates as per canvas circular motion generator
    """

    def setup(
            self, target,
            Hradius=0, Vradius=0, center=(0, 0),
            direction=1, phase=0):
        self.target = target
        self.Hradius, self.Vradius = Hradius, Vradius
        self.dx, self.dy = center
        self.cosb, self.sinb = math.cos(phase) * direction, math.sin(phase)
        cosa, sina = canvas.cosalpha, canvas.sinalpha

    def update(self, dt):
        # cos(A+B)=cos A cos B - sin A sin B
        cosab = canvas.cosalpha * self.cosb - canvas.sinalpha * self.sinb
        # sin(A+B)=sin A cos B + cos A sin B
        sinab = canvas.sinalpha * self.cosb + canvas.cosalpha * self.sinb
        # set target position
        self.target.pos = (
                self.dx + cosab * self.Hradius,
                self.dy + sinab * self.Vradius)


##--- ROTATION ----------------------------------------------------------------
class SimpleRotation(Action):
    """
    applies a continuous rotation to the target layer
    """
    RAD2DEG = 57.2957795131

    def setup(self, target=None, center=(0, 0), phase=0):
        self.target, self.phase = target, phase
        self.target.pos += center

    def update(self, dt):
        self.target.angle = 57.2957795131 * (canvas.alpha + self.phase)
        # radians to degrees glRotate needs degrees !


###--- COLOR CYCLE ------------------------------------------------------------
#class ColorCycle(Action):
    #"""
    #applies in a circular way a list of colors to a list of objects
    #"""

    #def setup(self, target, colorset):
        #self.target, self.colorset = target, colorset
        #self.i = cycle(self.color_list)
        #self.t = cycle(self.targets)

    #def update(self, dt):
        #t = self.t.next()
        #i = self.i.next()
        #t.color = i
        #t.batch=None
## remember to erase batch if shape has changed or make a color setter in shape  TODO


# --- CHANGE COLOR ON BOUNCE --------------------------------------------------
class reverse_dir(Action):
    """
    Checks for each axis if direction of target motion has changed
    """

    def setup(self, target=None):
        self.target = target
        self.previous = self.target.pos
        self.dirx, self.diry = 0, 0

    def update(self, dt):
        newdirx = cmp(self.target.pos[0], self.previous[0])
        newdiry = cmp(self.target.pos[1], self.previous[1])
        if newdirx != self.dirx:
            self.dirx = newdirx
            #            BOW.play()

            print self.target, "reversed dir x"
        elif newdiry != self.diry:
            self.diry = newdiry
            #            BOW1.play()

            print self.target, "reversed dir y"
        else:
            pass

